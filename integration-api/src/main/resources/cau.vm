<html>
    <head>
        <meta name="viewport" content="user-scalable=0, minimum-scale=1.0, maximum-scale=1.0"/>
        <style type="text/css" id="${first.ns}adStyles">
            #${first.ns}frame{
                position: absolute;
                z-index: 5;
                left: 0;
                right: 0;
                margin-left: auto;
                margin-right: auto;
                pointer-events: none;
            }
            #${first.ns}ad{
                display: none;
                background: rgba(0,0,0,0.8);
                width: 100%;
                height: 100%;
            }
            #${first.ns}closeButton{
                position: absolute;
                top: 5px;
                display: none;
                z-index: 10;
            }
            .${first.ns}beacon{
                display: none;
            }
            body {
                margin:0;
                padding:0;
                width: 100%;
                height: 100%;
                overflow: hidden;
            }
            ## Overriding creative centring
            P {
                text-align: left!important;
            }
        </style>
    </head>
    <body>
        <div id="${first.ns}ad" class="${first.ns}niuAnimate">
            <img id="${first.ns}frame">
            <img id="${first.ns}closeButton">
            <div id="${first.ns}thirdPartyAd">
                $CAUContentJSEsc
            </div>
        </div>
        <script type="text/javascript" src="${IMAIBaseUrl}"></script>
        <script type="text/javascript">
            (function() {
                var mraid = window.mraid,
                    count = 0,
                    bodyStyle = document.body.style,
                    htmlStyle = document.documentElement.style,
                    hundredPercent = "100" + String.fromCharCode(37),

                    isFrameAd = true,
                    isMraid = false,
                    useCustomClose = true,

                    adNamespace = '${first.ns}',
                    imgFrame = byId(adNamespace + "frame"),
                    imgCloseButton = byId(adNamespace + "closeButton"),
                    thirdPartyAd = byId(adNamespace + "thirdPartyAd"),

                    events = {
                        loadBeacons : [#if($IMBeaconUrl) '${IMBeaconUrl}?m=1','${IMBeaconUrl}?m=99&action=load-test' #end],
                        renderBeacons : [
                            #if($IMBeaconUrl) '${IMBeaconUrl}?b=${WIN_BID}${DEAL_GET_PARAM}','${IMBeaconUrl}?m=99&action=vc-test' #end
                            #if($PartnerBeaconUrl), '$PartnerBeaconUrl' #end
                            #if($AudienceVerificationTracker), '$AudienceVerificationTracker' #end
                            #if($ThirdPartyImpressionTracker), '$ThirdPartyImpressionTracker' #end
                        ],
                        clickBeacons : [
                            #if($IMClickUrl) '${IMClickUrl}' #end
                            #if($ThirdPartyClickTracker), '$ThirdPartyClickTracker' #end
                        ],
                        viewabilityBeacon1Sec: [#if($IMBeaconUrl) '${IMBeaconUrl}?m=99&action=viewability_one_second' #end],
                        viewabilityBeacon2Sec: [#if($IMBeaconUrl) '${IMBeaconUrl}?m=99&action=viewability_two_second' #end],
                        viewabilityBeacon1SecSimple: [#if($IMBeaconUrl) '${IMBeaconUrl}?m=99&action=viewability_one_second_simple' #end],
                        viewabilityBeacon2SecSimple: [#if($IMBeaconUrl) '${IMBeaconUrl}?m=99&action=viewability_two_second_simple' #end]
                    },
                    state = {
                        viewability1SecBeaconsFired: false,
                        viewability2SecBeaconsFired: false
                    },
                    eventHandler = {
                        fireBeacon : function (beaconUrl) {
                            if (undefined === beaconUrl) {
                                return;
                            }
                            var x = document.createElement("img");
                            x.setAttribute("src", beaconUrl);
                            x.className = "${first.ns}beacon";
                            document.body.appendChild(x);
                        },
                        fireBeacons : function (beaconList) {
                            for (var index = 0; index < beaconList.length; ++index) {
                                var element = beaconList[index];
                                if (undefined !== element) {
                                    this.fireBeacon(beaconList[index]);
                                }
                            }
                        },
                        fireLoadBeacons : function () {
                            this.fireBeacons(events.loadBeacons);
                        },
                        fireRenderBeacons : function () {
                            var self = this;
                            #if($Viewable)
                                window.setTimeout(
                                    function() {
                                        self.fireBeacons(events.renderBeacons);
                                    },
                                    1000
                                );
                            #else
                                self.fireBeacons(events.renderBeacons);
                            #end
                            window.setTimeout(
                                function () {
                                    if (!state.viewability1SecBeaconsFired) {
                                        state.viewability1SecBeaconsFired = true;
                                        self.fireBeacons(events.viewabilityBeacon1Sec);
                                    }
                                    self.fireBeacons(events.viewabilityBeacon1SecSimple);
                                },
                                1000
                            );
                            window.setTimeout(
                                function() {
                                    if (!state.viewability2SecBeaconsFired) {
                                        state.viewability2SecBeaconsFired = true;
                                        self.fireBeacons(events.viewabilityBeacon2Sec);
                                    }
                                    self.fireBeacons(events.viewabilityBeacon2SecSimple);
                                },
                                2000
                            );
                        },
                        fireClickBeacons : function () {
                            this.fireBeacons(events.clickBeacons);
                            if (!state.viewability2SecBeaconsFired) {
                                state.viewability2SecBeaconsFired = true;
                                this.fireBeacons(events.viewabilityBeacon2Sec);
                            }
                            if (!state.viewability1SecBeaconsFired) {
                                state.viewability1SecBeaconsFired = true;
                                this.fireBeacons(events.viewabilityBeacon1Sec);
                            }
                        }
                    };

                var innerFrameDimensions = {},
                    outerFrameDimensions = {};


                function setBodyDimension(w,h){
                    var width = w ? w : "auto",
                        height = h ? h : "auto";

                    htmlStyle.width = width;
                    htmlStyle.height = height;
                    bodyStyle.width = width;
                    bodyStyle.height = height;
                }


                function byId(id) {
                    return document.getElementById(id);
                }


                function byClass(className) {
                    return document.getElementsByClassName(className);
                }


                function toggleVisibleState(element, state) {
                    element.style.display = state ? "block" : "none";
                }


                function scaleAd() {
                    var screenSize, availableWidth, availableHeight, temp;

                    if (!(isMraid && typeof mraid.getScreenSize == 'function' && mraid.getScreenSize() !== undefined)) {
                        availableWidth = document.body.clientWidth;
                        availableHeight = document.body.clientHeight;
                    } else {
                        screenSize = mraid.getMaxSize();
                        availableWidth = screenSize.width;
                        availableHeight = screenSize.height;

                        ## Falling back to mraid.getScreenSize
                        if (0 === availableWidth || 0 === availableHeight) {
                            screenSize = mraid.getScreenSize();
                            availableWidth = screenSize.width;
                            availableHeight = screenSize.height;
                        }

                        ## Portrait locking
                        if (availableWidth > availableHeight) {
                            temp = availableWidth;
                            availableWidth = availableHeight;
                            availableHeight = temp;
                        }
                    }

                    var innerFrameWidth, innerFrameHeight,
                        outerFrameWidth, outerFrameHeight,
                        adWidth, adHeight;

                    var scaleFrameW, scaleFrameH, scaleFrame = 1;
                    var scaleAdW, scaleAdH, scaleAd = 1;
                    var adOffsetX = 0, adOffsetY = 0;

                    if (isFrameAd) {
                        outerFrameWidth = outerFrameDimensions.width;
                        outerFrameHeight = outerFrameDimensions.height;
                    } else {
                        outerFrameWidth = availableWidth;
                        outerFrameHeight = availableHeight;
                    }

                    scaleFrameW = availableWidth / outerFrameWidth;
                    scaleFrameH = availableHeight / outerFrameHeight;
                    scaleFrame = Math.min(scaleFrameW, scaleFrameH, 1);

                    outerFrameWidth = outerFrameWidth * scaleFrame;
                    outerFrameHeight = outerFrameHeight * scaleFrame;

                    imgFrame.style.zoom = scaleFrame;
                    imgFrame.style.webkitTransform = "translateY("+ (availableHeight-outerFrameHeight)/2 + "px)";
                    imgFrame.style.transform =  "translateY("+ (availableHeight-outerFrameHeight)/2 + "px)";
                    imgFrame.style.webkitTransformOrigin = "0 0";
                    imgFrame.style.transformOrigin = "0 0";

                    adWidth = ${first.width};
                    adHeight = ${first.height};

                    var frameAspectRatio = outerFrameWidth / outerFrameHeight;
                    var adAspectRatio = adWidth / adHeight;

                    ## Fix for https://jira.corp.inmobi.com/browse/IX-92
                    if (Math.abs((adAspectRatio - frameAspectRatio)) > 0.05 * frameAspectRatio) {
                        temp = adWidth;
                        adWidth = adHeight;
                        adHeight = temp;
                    }

                    if (isFrameAd) {
                        innerFrameWidth = innerFrameDimensions.width*scaleFrame;
                        innerFrameHeight = innerFrameDimensions.height*scaleFrame;
                    } else {
                        innerFrameWidth = outerFrameWidth;
                        innerFrameHeight = outerFrameHeight;
                    }

                    scaledLeftOffset = innerFrameDimensions.leftOffset*scaleFrame;
                    scaledTopOffset = innerFrameDimensions.topOffset*scaleFrame;
                    scaleAdW = (innerFrameWidth-scaledLeftOffset) / adWidth;
                    scaleAdH = (innerFrameHeight-scaledTopOffset) / adHeight;
                    scaleAd = Math.min(scaleAdW, scaleAdH, 1);

                    ## Centring within the frame
                    if (scaleAdW != scaleAdH) {
                        if (scaleAdH < scaleAdW) {
                            adOffsetX = (scaleAdW-scaleAdH)*adWidth/2;
                        } else {
                            adOffsetY = (scaleAdH-scaleAdW)*adHeight/2;
                        }
                    }
                    adOffsetX = adOffsetX + (availableWidth-innerFrameWidth)/2 + scaledLeftOffset;
                    adOffsetY = adOffsetY + (availableHeight-innerFrameHeight)/2 + scaledTopOffset;

                    ## Need to add webkit prefixed transforms for iOS
                    thirdPartyAd.style.webkitTransform = "translate(" + adOffsetX + "px, "+ adOffsetY + "px) scale(" + scaleAd +")";
                    thirdPartyAd.style.transform = "translate(" + adOffsetX + "px, "+ adOffsetY + "px) scale(" + scaleAd +")";
                    thirdPartyAd.style.webkitTransformOrigin = "0 0";
                    thirdPartyAd.style.transformOrigin = "0 0";
                }


                function onClose(event) {
                    event.stopPropagation();
                    if (!isMraid) {
                        var adElem = byId(adNamespace + "ad");
                        adElem.innerHTML = "";
                        toggleVisibleState(adElem, false);
                    } else {
                        mraid.close();
                    }
                }


                function lockOrientation() {
                    mraid.setOrientationProperties({forceOrientation:'portrait', allowOrientationChange:false});
                }


                function showAd() {
                    eventHandler.fireRenderBeacons();
                    setBodyDimension(hundredPercent, hundredPercent);
                    scaleAd();

                    if (useCustomClose) {
                        var close = byId(adNamespace + "closeButton");
                        toggleVisibleState(close, true);
                        close.addEventListener("click", onClose, false);
                    }

                    var ad = byId(adNamespace + "ad");
                    toggleVisibleState(ad, true);
                }


                function parseAdJson() {
                    try {
                        var adJson = '$first.cauElementJsonObject';

                        if ('' !== adJson) {
                            adJson = adJson.replace('$' + '{first.ns}', adNamespace);
                            adJson = JSON.parse(adJson);

                            (function setFrameProperties() {
                                if (null === adJson.frame) {
                                    isFrameAd = false;
                                } else {
                                    var frameJson = adJson.frame;

                                    if (null === frameJson.ad_area || null === frameJson.image_url || null === frameJson.width || null === frameJson.height) {
                                            isFrameAd = false;
                                    } else {
                                        imgFrame.src = frameJson.image_url;

                                        var outerFrameWidth = frameJson.width,
                                            outerFrameHeight = frameJson.height,
                                            adAreaJson = frameJson.ad_area;
                                            outerFrameDimensions.width = outerFrameWidth;
                                            outerFrameDimensions.height = outerFrameHeight;

                                        if (null !== adAreaJson.percent_width) {
                                            innerFrameDimensions.width = outerFrameWidth * parseFloat(adAreaJson.percent_width);
                                            innerFrameDimensions.height = outerFrameHeight * parseFloat(adAreaJson.percent_height);
                                            innerFrameDimensions.leftOffset = outerFrameWidth * parseFloat(adAreaJson.percent_offset_x) || 0;
                                            innerFrameDimensions.topOffset = outerFrameHeight * parseFloat(adAreaJson.percent_offset_y) || 0;
                                        } else {
                                            innerFrameDimensions.width = parseFloat(adAreaJson.width);
                                            innerFrameDimensions.height = parseFloat(adAreaJson.height);
                                            innerFrameDimensions.leftOffset = parseFloat(adAreaJson.offset_x) || 0;
                                            innerFrameDimensions.topOffset = parseFloat(adAreaJson.offset_y) || 0;
                                        }
                                    }
                                }
                            })();

                            (function setCloseProperties() {
                                if (null === adJson.close) {
                                    useCustomClose = false;
                                } else {
                                    var closeJson = adJson.close;

                                    if (closeJson.image_url) {
                                        imgCloseButton.src = closeJson.image_url;

                                        if ('TOP_LEFT' === closeJson.location) {
                                            imgCloseButton.style.left = '5px';
                                        } else {
                                            imgCloseButton.style.right = '5px';
                                        }
                                    } else {
                                        useCustomClose = false;
                                    }
                                }
                            })();

                            (function setAnimationProperties() {
                                if (null !== adJson.animation) {

                                    if (adJson.animation.css_style) {
                                        var css = document.createElement("style");
                                        css.type = "text/css";
                                        css.innerHTML = adJson.animation.css_style;
                                        document.body.appendChild(css);
                                    }
                                }
                            })();
                        }
                    } catch (e) {
                        isFrameAd = false;
                        useCustomClose = false;
                    }
                }


                function onMraidReady() {

                    lockOrientation();

                    mraid.useCustomClose(useCustomClose);

                    if (typeof mraid.isViewable === "function" && mraid.isViewable()) {
                        showAd();
                    } else {
                        mraid.addEventListener("viewableChange", function(viewable) {
                            if (viewable) {
                                mraid.removeEventListener("viewableChange", arguments.callee);
                                showAd();
                            }
                        });
                    }
                }


                function fireAdReady() {
                    var readyHandler=function(){
                        _im_imai.fireAdReady();
                        _im_imai.removeEventListener('ready', readyHandler);
                    };
                   _im_imai.addEventListener('ready',readyHandler);
                }


                function checkForMraid() {
                    count++;
                    #if ($SDK450Onwards && $isInterstitial)
                        fireAdReady();
                    #end

                    if (4 !== count) {
                        if ("undefined" !== typeof mraid) {
                            isMraid = true;
                            if ("loading" === mraid.getState()) {
                                mraid.addEventListener("ready", onMraidReady);
                            } else {
                                onMraidReady();
                            }
                        } else {
                            setTimeout(checkForMraid, 500);
                        }
                    } else {
                        showAd();
                    }
                }


                function setupClick() {
                    function clickHandler() {
                        document.removeEventListener('click', clickHandler);
                        eventHandler.fireClickBeacons();
                    }
                    document.addEventListener('click', clickHandler);
                }

                eventHandler.fireLoadBeacons();
                setupClick();
                parseAdJson();
                checkForMraid();
            })();
        </script>
        ## ViewabilityTrackers have been added at the end to prevent the rest of the ad from failing for faulty viewability trackers
        #if($ViewabilityTracker) $ViewabilityTracker #end
    </body>
</html>
